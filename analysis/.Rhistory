#save(gse, file = "../data/RNAseq/gse39411.RData")
#vst
gse.vst <- gse
exprs(gse.vst) <- limma::normalizeVSN(gse.vst)
patAnno <- pData(gse.vst) %>% rownames_to_column("sampleID") %>%
select(sampleID, description) %>%
separate(description, into = c("patID","stimulation","timePoint"),sep = "_") %>%
mutate(cellType = substr(patID,1,nchar(patID)-1)) %>%
mutate(cellType = ifelse(cellType == "N", "B-cell",cellType)) %>%
mutate(timePoint = abs(as.integer(gsub("T","",timePoint)))) %>%
mutate(stimulation = factor(stimulation, levels = c("US","S")))
pData(gse.vst) <- patAnno[match(colnames(gse.vst), patAnno$sampleID),]
load("../data/RNAseq/ddsCampo.RData")
ddsCLL <- ddsCampo[,!is.na(ddsCampo$IGHV) ]
ddsCLL <- estimateSizeFactors(ddsCLL)
ddsCLL <- ddsCLL[rowSums(counts(ddsCLL)) > 10,]
ddsCLL.voom <- ddsCLL
assay(ddsCLL.voom) <- limma::voom(counts(ddsCLL), lib.size = ddsCLL$sizeFactor)$E
ighv <- factor(ddsCLL.voom$IGHV, levels = c("mutated","unmutated"))
designMat <- model.matrix(~ 1 + ighv)
enrichRes <- runCamera(assay(ddsCLL.voom), designMat, gmts$H,
id = rowData(ddsCLL.voom)$symbol,
method = "camera", pCut = 0.01, ifFDR = TRUE, removePrefix = "HALLMARK_",
plotTitle = "ICGC-CLL cohort (Hallmarks, 5% FDR)",
setToHighlight = highSet, setMap = setMap, insideLegend = TRUE)
design(ddsCLL) <- ~IGHV
colData(ddsCLL)
load("../data/RNAseq/ddsCampo.RData")
ddsCLL <- ddsCampo[,!is.na(ddsCampo$IGHV) ]
ddsCLL <- estimateSizeFactors(ddsCLL)
ddsCLL <- ddsCLL[rowSums(counts(ddsCLL)) > 10,]
ddsCLL.voom <- ddsCLL
assay(ddsCLL.voom) <- limma::voom(counts(ddsCLL), lib.size = ddsCLL$sizeFactor)$E
design(ddsCLL)
design(ddsCLL) <- ~ IGHV
ddsCLL$IGHV <- factor(ddsCLL$IGHV, levels = c("unmutated","mutated"))
design(ddsCLL) <- ~ IGHV
deRes <- DESeq(ddsCLL)
resTab <- results(deRes, tidy = TRUE)
resTab
resTab <- results(deRes, tidy = TRUE) %>%
mutate(symbol = rowData(ddsCLL[row,])$symbol)
resTab
geneList <- c("CDC25","CDK1","CCNE1")
geneList
sigList <- filter(resTab, symbol %in% geneList)
sigList
geneList <- c("CDC25A","CDK1","CCNE1")
sigList <- filter(resTab, symbol %in% geneList)
geneList <- c("CDC25A","CDK1","CCNE1")
sigList <- filter(resTab, symbol %in% geneList)
sigToEnv()
sigTab
geneList <- c("CDC25A","CDK1","CCNE1")
sigTab <- filter(resTab, symbol %in% geneList)
sigTab
id <- sigTab[i,]$row
plotTab <- tibble(expr = counts(ddsCLL)[id,])
i
i<-1
symol <- sigTab[i,]$symbol
pval <- sigTab[i,]$pvalue
id <- sigTab[i,]$row
plotTab <- tibble(expr = counts(ddsCLL)[id,])
plotTab
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]),
IGHV.status = ddsCLL$IGHV)
plotTab
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]),
IGHV.status = str_to_title(ddsCLL$IGHV))
plotTab
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]),
IGHV.status = str_to_title(ddsCLL$IGHV),
patID = colnames(ddsCLL))
numTab <- group_by(plotTab, IGHV.status) %>%
summarise(n=length(patID))
plotTab <- left_join(plotTab, numTab, by = "IGHV.status") %>%
mutate(mutNum = sprintf("%s\n(n=%s)", IGHV.status, n)) %>%
mutate(mutNum = factor(mutNum, levels = unique(mutNum)))
titleText <- sprintf("%s ~ IGHV status", drug)
titleText <- sprintf("%s", symbol)
symbol <- sigTab[i,]$symbol
pval <- sigTab[i,]$pvalue
id <- sigTab[i,]$row
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]),
IGHV.status = str_to_title(ddsCLL$IGHV),
patID = colnames(ddsCLL))
numTab <- group_by(plotTab, IGHV.status) %>%
summarise(n=length(patID))
plotTab <- left_join(plotTab, numTab, by = "IGHV.status") %>%
mutate(mutNum = sprintf("%s\n(n=%s)", IGHV.status, n)) %>%
mutate(mutNum = factor(mutNum, levels = unique(mutNum)))
titleText <- sprintf("%s", symbol)
pval <- formatNum(pval, digits = 1, format="e")
titleText <- bquote(atop(.(titleText), "("~italic("P")~"="~.(pval)~")"))
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) + theme_classic() +
xlab("") + ylab("Viability") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
ylim(0.5, 1.2) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) + theme_classic() +
xlab("") + ylab("log2(RNAseq counts)") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
ylim(0.5, 1.2) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
plotTab
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4)
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) + theme_classic()
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(size =1, aes(col = mutNum)) + theme_classic() +
xlab("") + ylab("log2(RNAseq counts)") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
ylim(0.5, 1.2) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
plotTab$expr
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]+1),
IGHV.status = str_to_title(ddsCLL$IGHV),
patID = colnames(ddsCLL))
numTab <- group_by(plotTab, IGHV.status) %>%
summarise(n=length(patID))
plotTab <- left_join(plotTab, numTab, by = "IGHV.status") %>%
mutate(mutNum = sprintf("%s\n(n=%s)", IGHV.status, n)) %>%
mutate(mutNum = factor(mutNum, levels = unique(mutNum)))
titleText <- sprintf("%s", symbol)
pval <- formatNum(pval, digits = 1, format="e")
titleText <- bquote(atop(.(titleText), "("~italic("P")~"="~.(pval)~")"))
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) +
theme_classic() +
xlab("") + ylab("log2(RNAseq counts)") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
ylim(0.5, 1.2) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) +
theme_classic() +
xlab("") + ylab("log2(RNAseq counts)") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
geneList <- c("CDC25A","CDK1","CCNE1")
sigTab <- filter(resTab, symbol %in% geneList)
pList <- lapply(seq(nrow(sigTab)), function(i) {
symbol <- sigTab[i,]$symbol
pval <- sigTab[i,]$pvalue
id <- sigTab[i,]$row
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]+1),
IGHV.status = str_to_title(ddsCLL$IGHV),
patID = colnames(ddsCLL))
numTab <- group_by(plotTab, IGHV.status) %>%
summarise(n=length(patID))
plotTab <- left_join(plotTab, numTab, by = "IGHV.status") %>%
mutate(mutNum = sprintf("%s\n(n=%s)", IGHV.status, n)) %>%
mutate(mutNum = factor(mutNum, levels = unique(mutNum)))
titleText <- sprintf("%s", symbol)
pval <- formatNum(pval, digits = 1, format="e")
titleText <- bquote(atop(.(titleText), "("~italic("P")~"="~.(pval)~")"))
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) +
theme_classic() +
xlab("") + ylab("log2(RNAseq counts)") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
})
noY <- theme(axis.line.y = element_blank(), axis.ticks.y = element_blank(),
axis.text.y = element_blank(), axis.title.y = element_blank())
cowplot::plot_grid(pList[[1]],pList[[2]]+noY, pList[[3]] + noY, nrow=1,
rel_widths = c(1.1,1,1))
geneList <- c("CDC25A","CDK1","CCNE1")
sigTab <- filter(resTab, symbol %in% geneList)
pList <- lapply(seq(nrow(sigTab)), function(i) {
symbol <- sigTab[i,]$symbol
pval <- sigTab[i,]$pvalue
id <- sigTab[i,]$row
plotTab <- tibble(expr = log2(counts(ddsCLL)[id,]+1),
IGHV.status = str_to_title(ddsCLL$IGHV),
patID = colnames(ddsCLL))
numTab <- group_by(plotTab, IGHV.status) %>%
summarise(n=length(patID))
plotTab <- left_join(plotTab, numTab, by = "IGHV.status") %>%
mutate(mutNum = sprintf("%s\n(n=%s)", IGHV.status, n)) %>%
mutate(mutNum = factor(mutNum, levels = unique(mutNum)))
titleText <- sprintf("%s", symbol)
pval <- formatNum(pval, digits = 1, format="e")
titleText <- bquote(atop(.(titleText), "("~italic("P")~"="~.(pval)~")"))
ggplot(plotTab, aes(x = mutNum,y = expr)) +
stat_boxplot(geom = "errorbar", width = 0.3) +
geom_boxplot(outlier.shape = NA, col="black", width=0.4) +
geom_beeswarm(cex=2, size =1, aes(col = mutNum)) +
theme_classic() +
xlab("") + ylab("log2(RNAseq counts)") + ggtitle(titleText) + xlab("") +
scale_color_manual(values = c("#0072B5FF","#BC3C29FF")) +
theme(axis.line.x = element_blank(), axis.ticks.x = element_blank(),
axis.title = element_text(size=18),
axis.text = element_text(size=18),
plot.title = element_text(size= 18, face = "bold", hjust = 0.5),
legend.position = "none",
axis.title.x = element_text(face="bold"))
})
noY <- theme(axis.title.y = element_blank())
cowplot::plot_grid(pList[[1]],pList[[2]]+noY, pList[[3]] + noY, nrow=1,
rel_widths = c(1.1,1,1))
load("../output/EMBL_result.RData")
result$coefMat
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets
#plot network
#Only plot for finnally selected targets
load("../output/EMBL_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- CancerxTargets[CancerxTargets>0]
#CancerxTargets <- c("MAP2K2", "MAP4K2", "BTK", "PTK6", "WEE1", "CHEK1")
plotTarGroups(ProcessTargetResults, CancerxTargets)
library(depInfeR)
library(stringdist)
library(BloodCancerMultiOmics2017)
library(DESeq2)
library(igraph)
library(tidyverse)
source("../code/utils.R")
knitr::opts_chunk$set(dev = c("png","pdf"))
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
plotTarGroups(ProcessTargetResults, CancerxTargets)
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
CancerxTargets
setwd("~/Workflows/DepInfeR/analysis")
library(depInfeR)
library(depInfeR)
library(missForest)
library(tidyverse)
source("../code/utils.R")
knitr::opts_chunk$set(dev = c("png","pdf"))
tarList <- readRDS("../output/allTargets.rds")
# GDSC cell line screening data (for each of the cancer types and the table with the drug synonyms)
cancerxgene_ALL <- read_csv("../data/GDSC/cancerxgene_ALL_IC_GDSC1.csv")
cancerxgene_DLBC <- read_csv("../data/GDSC/cancerxgene_DLBC_IC_GDSC1.csv")
cancerxgene_AML <- read_csv("../data/GDSC/cancerxgene_AML_IC_GDSC1.csv")
cancerxgene_BRCA <- read_csv("../data/GDSC/cancerxgene_BRCA_IC_GDSC1.csv")
cancerxgene_syn <- read_csv("../data/GDSC/GDSC1_druglist_pubchem.csv")
# cancer cell line genetic background annotation
# mutations
BRCA_mut <- read_csv("../data/GDSC/BRCA_genetic.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
ALL_mut <- read_csv("../data/GDSC/ALL_genetics.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
LAML_mut <- read_csv("../data/GDSC/LAML_genetic.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
DLBC_mut <- read_csv("../data/GDSC/DLBC_genetic.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
bind_rows_keep_factors <- function(...) {
## Identify all factors
factors <- unique(unlist(
map(list(...), ~ select_if(..., is.factor) %>% names())
))
## Bind dataframes, convert characters back to factors
suppressWarnings(bind_rows(...)) %>%
mutate_at(dplyr::vars(one_of(factors)), factor)
}
cancerxgene_set1 <- bind_rows_keep_factors(cancerxgene_ALL, cancerxgene_AML, cancerxgene_DLBC, cancerxgene_BRCA)
cancerxgene_set1$synonyms <- cancerxgene_syn$Synonyms[match(cancerxgene_set1$`Drug name`, cancerxgene_syn$Name)]
cancerxgene_set1 <- mutate(cancerxgene_set1, `Drug name` = tolower(`Drug name`)) %>%
mutate(`Drug name` = gsub("[- ]","",`Drug name`))  %>% mutate(`Drug name`= gsub(" *\\(.*?\\) *", "",`Drug name`))
tarList <- mutate(tarList, Drug = ifelse(Drug=="alvocidib", "flavopiridol", Drug))
tarList <- mutate(tarList, Drug = ifelse(Drug=="canertinib", "ci1033", Drug))
tarList <- mutate(tarList, Drug = ifelse(Drug=="dacomitinib", "pf00299804", Drug))
tarList <- mutate(tarList, Drug = ifelse(Drug=="nintedanib", "bibf1120", Drug))
finalList <- intersect(tarList$Drug, cancerxgene_set1$`Drug name`)
cancerxgene_set1 <- dplyr::rename(cancerxgene_set1, Drug = `Drug name`)
cancerxgene_set1_druglist <- filter(cancerxgene_set1, !is.na(`Drug Id`), !duplicated(`Drug Id`), !duplicated(Drug))
targets <- left_join(tarList, cancerxgene_set1_druglist, by = "Drug") %>% dplyr::select(Drug, `Drug Id`, `Target Classification`, EC50,`Apparent Kd`, `Gene Name`) %>%
filter(!is.na(Drug)) %>%
filter(Drug %in% finalList)
length(unique(targets$Drug))
colnames(targets) <- c("drugName", "drugID", "targetClassification","EC50","Kd","targetName")
tarMat_kd <- dplyr::filter(targets, targetClassification == "High confidence") %>%
dplyr::select(drugName, targetName, Kd) %>%
spread(key = "targetName", value = "Kd") %>%
remove_rownames() %>% column_to_rownames("drugName") %>% as.matrix()
testTab <- tibble(x = seq(-6,2,length.out = 20)) %>% mutate(y = arcTrans(x, b=2, g=3))
ggplot(testTab, aes(x=x,y=y)) + geom_point() +
xlab(bquote("original "~-log[10]*"(Kd) value")) + ylab("transformed value") +
theme_custom
ProcessTargetResults <- processTarget(tarMat_kd, ifKd = TRUE , ifCorFeat = TRUE)
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
plotTarGroups(ProcessTargetResults, CancerxTargets)
install.packages("qgraph")
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
plotTarGroups(ProcessTargetResults, CancerxTargets)
#plot network
plotTarGroups(ProcessTargetResults, CancerxTargets)
sanger_viab <- dplyr::filter(cancerxgene_set1, `Drug Id` %in%targetsGDSC$drugID) %>%
dplyr::select(Drug, `Drug Id`, `Cell line name` , `Cosmic sample Id`, `TCGA classification`, IC50, AUC, `Max conc`,RMSE, `Z score`)
sanger_matrix <- sanger_viab %>% dplyr::select(Drug, `Cell line name`, AUC) %>%
tidyr::spread(key = `Cell line name`, value = AUC) %>%
remove_rownames() %>% column_to_rownames("Drug") %>%
as.matrix()
missTab <- data.frame(NA_cutoff = character(0), remain_celllines = character(0), stringsAsFactors = FALSE)
for (i in 0 : 138) {
a <- dim(sanger_matrix[,colSums(is.na(sanger_matrix)) <= i])[2]
missTab [i,] <- c(i, a)
}
#missTab
#plot(missTab, type = "l")
sanger_mat_subset <- sanger_matrix[,colSums(is.na(sanger_matrix)) <= 24]
impRes <- missForest(t(sanger_mat_subset))
imp_missforest <- impRes$ximp
sanger_mat_forest <- t(imp_missforest)
colnames(sanger_mat_forest) <- colnames(sanger_mat_forest)
rownames(sanger_mat_forest) <- rownames(sanger_mat_forest)
sanger_mat_forest.scale <- t(mscale(t(sanger_mat_forest)))
mutation_GDSC <- readxl::read_xlsx("../data/GDSC/mutation_GDSC.xlsx") %>%
data.frame() %>%
column_to_rownames("cellLine")
tarMat_kd
viabMat_GDS
library(depInfeR)
library(missForest)
library(tidyverse)
source("../code/utils.R")
knitr::opts_chunk$set(dev = c("png","pdf"))
library(depInfeR)
library(missForest)
library(tidyverse)
source("../code/utils.R")
knitr::opts_chunk$set(dev = c("png","pdf"))
tarList <- readRDS("../output/allTargets.rds")
# GDSC cell line screening data (for each of the cancer types and the table with the drug synonyms)
cancerxgene_ALL <- read_csv("../data/GDSC/cancerxgene_ALL_IC_GDSC1.csv")
cancerxgene_DLBC <- read_csv("../data/GDSC/cancerxgene_DLBC_IC_GDSC1.csv")
cancerxgene_AML <- read_csv("../data/GDSC/cancerxgene_AML_IC_GDSC1.csv")
cancerxgene_BRCA <- read_csv("../data/GDSC/cancerxgene_BRCA_IC_GDSC1.csv")
cancerxgene_syn <- read_csv("../data/GDSC/GDSC1_druglist_pubchem.csv")
# cancer cell line genetic background annotation
# mutations
BRCA_mut <- read_csv("../data/GDSC/BRCA_genetic.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
ALL_mut <- read_csv("../data/GDSC/ALL_genetics.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
LAML_mut <- read_csv("../data/GDSC/LAML_genetic.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
DLBC_mut <- read_csv("../data/GDSC/DLBC_genetic.csv", col_names = TRUE, col_types = cols(.default = col_factor()))
bind_rows_keep_factors <- function(...) {
## Identify all factors
factors <- unique(unlist(
map(list(...), ~ select_if(..., is.factor) %>% names())
))
## Bind dataframes, convert characters back to factors
suppressWarnings(bind_rows(...)) %>%
mutate_at(dplyr::vars(one_of(factors)), factor)
}
cancerxgene_set1 <- bind_rows_keep_factors(cancerxgene_ALL, cancerxgene_AML, cancerxgene_DLBC, cancerxgene_BRCA)
cancerxgene_set1$synonyms <- cancerxgene_syn$Synonyms[match(cancerxgene_set1$`Drug name`, cancerxgene_syn$Name)]
cancerxgene_set1 <- mutate(cancerxgene_set1, `Drug name` = tolower(`Drug name`)) %>%
mutate(`Drug name` = gsub("[- ]","",`Drug name`))  %>% mutate(`Drug name`= gsub(" *\\(.*?\\) *", "",`Drug name`))
overDrug_cancerx_set1_name <- intersect(tarList$Drug, cancerxgene_set1$`Drug name`)
tarList <- mutate(tarList, Drug = ifelse(Drug=="alvocidib", "flavopiridol", Drug))
tarList <- mutate(tarList, Drug = ifelse(Drug=="canertinib", "ci1033", Drug))
tarList <- mutate(tarList, Drug = ifelse(Drug=="dacomitinib", "pf00299804", Drug))
tarList <- mutate(tarList, Drug = ifelse(Drug=="nintedanib", "bibf1120", Drug))
finalList <- intersect(tarList$Drug, cancerxgene_set1$`Drug name`)
cancerxgene_set1 <- dplyr::rename(cancerxgene_set1, Drug = `Drug name`)
cancerxgene_set1_druglist <- filter(cancerxgene_set1, !is.na(`Drug Id`), !duplicated(`Drug Id`), !duplicated(Drug))
targets <- left_join(tarList, cancerxgene_set1_druglist, by = "Drug") %>% dplyr::select(Drug, `Drug Id`, `Target Classification`, EC50,`Apparent Kd`, `Gene Name`) %>%
filter(!is.na(Drug)) %>%
filter(Drug %in% finalList)
length(unique(targets$Drug))
colnames(targets) <- c("drugName", "drugID", "targetClassification","EC50","Kd","targetName")
tarMat_kd <- dplyr::filter(targets, targetClassification == "High confidence") %>%
dplyr::select(drugName, targetName, Kd) %>%
spread(key = "targetName", value = "Kd") %>%
remove_rownames() %>% column_to_rownames("drugName") %>% as.matrix()
testTab <- tibble(x = seq(-6,2,length.out = 20)) %>% mutate(y = arcTrans(x, b=2, g=3))
ggplot(testTab, aes(x=x,y=y)) + geom_point() +
xlab(bquote("original "~-log[10]*"(Kd) value")) + ylab("transformed value") +
theme_custom
ProcessTargetResults <- processTarget(tarMat_kd, KdAsInput  = TRUE , removeCorrelated  = TRUE)
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
plotTarGroups(ProcessTargetResults, CancerxTargets)
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
#plot network
plotTarGroups(ProcessTargetResults, CancerxTargets)
CancerxTargets
targetsOfInterest <- CancerxTargets
mapReducedTargets <- ProcessTargetResults$targetCluster
TarGroups <- lapply(names(mapReducedTargets), function(sourceName) {
if (length(mapReducedTargets[[sourceName]]) != 0) {
tibble(source = sourceName, target = mapReducedTargets[[sourceName]])
}
}) %>% bind_rows()
if (!is.null(targetsOfInterest)) {
TarGroupsSubset <- TarGroups %>% filter_all(any_vars(. %in% targetsOfInterest))
} else {
TarGroupsSubset <- TarGroups
}
nSource <- length(unique(TarGroupsSubset$source))
groups <- list(selectedTarget = c(seq(nSource)),
mappedTargets = seq(nSource+1, nSource + nrow(TarGroupsSubset)))
qgraph::qgraph(TarGroupsSubset, groups = groups,
directed = FALSE, color = ggsci::pal_locuszoom(alpha = 0.7)(2) ,
vsize = 6,  layout = "spring", label.cex =1, shape="circle",
label.scale = TRUE, label.color = "black", legend = FALSE)
plotTarGroups <- function(ProcessTargetResults, targetsOfInterest = NULL) {
mapReducedTargets <- ProcessTargetResults$targetCluster
TarGroups <- lapply(names(mapReducedTargets), function(sourceName) {
if (length(mapReducedTargets[[sourceName]]) != 0) {
tibble(source = sourceName, target = mapReducedTargets[[sourceName]])
}
}) %>% bind_rows()
if (!is.null(targetsOfInterest)) {
TarGroupsSubset <- TarGroups %>% filter_all(any_vars(. %in% targetsOfInterest))
} else {
TarGroupsSubset <- TarGroups
}
nSource <- length(unique(TarGroupsSubset$source))
groups <- list(selectedTarget = c(seq(nSource)),
mappedTargets = seq(nSource+1, nSource + nrow(TarGroupsSubset)))
qgraph::qgraph(TarGroupsSubset, groups = groups,
directed = FALSE, color = ggsci::pal_locuszoom(alpha = 0.7)(2) ,
vsize = 6,  layout = "spring", label.cex =1, shape="circle",
label.scale = TRUE, label.color = "black", legend = FALSE)
}
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
#plot network
plotTarGroups(ProcessTargetResults, CancerxTargets)
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
#plot network
plotTarGroups(ProcessTargetResults, CancerxTargets)
source('~/Workflows/DepInfeR/code/utils.R', echo=TRUE)
load("../output/GDSC_result.RData")
CancerxTargets<- rowSums(result$freqMat)
CancerxTargets <- names(CancerxTargets[CancerxTargets>0])
#plot network
plotTarGroups(ProcessTargetResults, CancerxTargets)
install.packages("stringdist")
BiocManager::install("BloodCancerMultiOmics2017")
library(depInfeR)
library(stringdist)
library(BloodCancerMultiOmics2017)
library(DESeq2)
library(igraph)
library(tidyverse)
source("../code/utils.R")
knitr::opts_chunk$set(dev = c("png","pdf"))
library(depInfeR)
library(RColorBrewer)
library(pheatmap)
library(ggbeeswarm)
library(ggrepel)
library(tidyverse)
source("../code/utils.R")
knitr::opts_chunk$set(dev = c("png","pdf"))
load("../output/inputs_GDSC.RData")
dim(tarMat_GDSC)
dim(viabMat_GDSC)
result <- runLASSOregression(TargetMatrix = tarMat_GDSC, ResponseMatrix = viabMat_GDSC, seed = 333)
